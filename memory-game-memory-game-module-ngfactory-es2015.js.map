{"version":3,"sources":["webpack:///./src/app/memory-game/memory-game-routing.module.ts","webpack:///./src/app/memory-game/memory-game.module.ts","webpack:///./src/app/memory-game/memory-game/memory-game.component.html","webpack:///./src/app/memory-game/memory-game/memory-game.component.ts"],"names":[],"mappings":"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","file":"memory-game-memory-game-module-ngfactory-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MemoryGameComponent } from './memory-game/memory-game.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MemoryGameComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MemoryGameRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MemoryGameRoutingModule } from './memory-game-routing.module';\nimport { MemoryGameComponent } from './memory-game/memory-game.component';\n\n@NgModule({\n  declarations: [MemoryGameComponent],\n  imports: [CommonModule, MemoryGameRoutingModule]\n})\nexport class MemoryGameModule {}\n","<div class=\"container\">\n  <h1 class=\"title\">Memory Game</h1>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-xl-8 col-lg-10\">\n      <div class=\"caption\">\n        <select (change)=\"changeGridSize($event.target.value)\">\n          <option value=\"4\">4x4</option>\n          <option value=\"6\">6x6</option>\n          <option value=\"8\">8x8</option>\n        </select>\n        <p><span class=\"text\">Timer:</span> {{ stopwatch }}</p>\n        <p><span class=\"text\">Score:</span> {{ score }}</p>\n      </div>\n      <div class=\"list size-{{ gridSize }}\">\n        <div *ngFor=\"let item of gridLengthArr; let i = index\" class=\"item-wrap\">\n          <div\n            class=\"item\"\n            (click)=\"showItem(i)\"\n            [ngClass]=\"{ open: gridImages[i].show, opened: gridImages[i].opened }\"\n          >\n            <div class=\"img\" [style.background-image]=\"gridImages[i].url\"></div>\n          </div>\n        </div>\n        <div class=\"popup\" *ngIf=\"gridCompleted\">\n          <h3 class=\"popup-title\">Well done!</h3>\n          <p class=\"popup-time\">Your time: {{ stopwatch }}</p>\n          <p class=\"popup-score\">Your score: {{ score }}</p>\n          <button (click)=\"restartGrid()\">Restart</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Image } from '../interfaces/image.interface';\n\n@Component({\n  selector: 'app-memory-game',\n  templateUrl: './memory-game.component.html',\n  styleUrls: ['./memory-game.component.scss']\n})\nexport class MemoryGameComponent implements OnInit {\n  images: object[] = [];\n  stopwatch = 0;\n  stopwatchInterval: any;\n  score = 0;\n  gridImages: Image[] = [];\n  gridSize = 4;\n  gridLength = 0;\n  gridLengthArr: number[] = [];\n  gridMaxLength = 32;\n  gridCompleted = false;\n  gridClickable = true;\n  comparePictureId: number | null = null;\n  compareIndex: number | null = null;\n  transitionTime = 1000;\n\n  constructor(private domSanitizer: DomSanitizer) {}\n\n  ngOnInit() {\n    this.loadImagesUrls();\n    this.loadGrid();\n  }\n\n  startStopwatch() {\n    if (this.stopwatchInterval) {\n      return;\n    }\n    this.stopwatchInterval = setInterval(() => {\n      this.stopwatch++;\n    }, 1000);\n  }\n\n  stopStopwatch() {\n    clearInterval(this.stopwatchInterval);\n    this.stopwatchInterval = null;\n  }\n\n  clearStopwatch() {\n    this.stopwatch = 0;\n  }\n\n  clearScore() {\n    this.score = 0;\n  }\n\n  loadImagesUrls() {\n    for (let i = 1; i <= this.gridMaxLength; i++) {\n      let url: string | object = 'assets/images/img' + i + '.jpg';\n      url = this.domSanitizer.bypassSecurityTrustStyle(`url(${url})`);\n      this.images.push(url);\n    }\n  }\n\n  loadGrid() {\n    this.gridLength = this.gridSize * this.gridSize;\n    this.gridLengthArr = Array(this.gridLength)\n      .fill(0)\n      .map((x, i) => i);\n    this.gridImages = [];\n    for (let i = 0; i < this.gridLength; i++) {\n      const imageIndex = Math.floor(i / 2);\n      const gridImage: Image = {\n        url: this.images[imageIndex],\n        pictureId: imageIndex,\n        show: false,\n        opened: false\n      };\n      this.gridImages.push(gridImage);\n    }\n    this.shuffleArray(this.gridImages);\n  }\n\n  changeGridSize(val: number) {\n    this.compareIndex = null;\n    this.comparePictureId = null;\n    this.gridImages.forEach(item => {\n      item.show = false;\n      item.opened = false;\n    });\n    let time = this.transitionTime;\n    if (!this.stopwatchInterval) {\n      time = 0;\n    }\n    this.stopStopwatch();\n    this.clearStopwatch();\n    this.clearScore();\n    setTimeout(() => {\n      this.gridSize = val;\n      this.loadGrid();\n    }, time);\n  }\n\n  checkGridComplete() {\n    let complete = true;\n    for (const image of this.gridImages) {\n      if (!image.opened) {\n        complete = false;\n        break;\n      }\n    }\n    if (complete) {\n      this.gridComplete();\n    }\n  }\n\n  gridComplete() {\n    this.gridCompleted = true;\n    this.stopStopwatch();\n  }\n\n  restartGrid() {\n    this.changeGridSize(this.gridSize);\n    this.gridCompleted = false;\n  }\n\n  showItem(index: number) {\n    if (!this.gridClickable) {\n      return;\n    }\n    this.startStopwatch();\n    this.compareImagesPair(index);\n    this.checkGridComplete();\n  }\n\n  compareImagesPair(index: number) {\n    // if clicked is already showed\n    if (index === this.compareIndex || this.gridImages[index].opened) {\n      return;\n    }\n\n    // show item\n    this.gridImages[index].show = true;\n\n    if (this.comparePictureId === null || this.compareIndex === null) {\n      this.comparePictureId = this.gridImages[index].pictureId;\n      this.compareIndex = index;\n    } else {\n      let time = this.transitionTime;\n      this.gridClickable = false;\n      if (this.gridImages[index].pictureId === this.comparePictureId && this.compareIndex !== null) {\n        this.gridImages[index].opened = true;\n        this.gridImages[this.compareIndex].opened = true;\n        time = 0;\n        this.increaseScore();\n      }\n      setTimeout(() => {\n        this.gridImages[index].show = false;\n        if (this.compareIndex !== null) {\n          this.gridImages[this.compareIndex].show = false;\n        }\n        this.comparePictureId = null;\n        this.compareIndex = null;\n        this.gridClickable = true;\n      }, time);\n    }\n  }\n\n  increaseScore() {\n    let dif = Math.floor((100 - this.stopwatch) / 10);\n    if (dif < 0) {\n      dif = 0;\n    }\n    this.score += dif + 20;\n  }\n\n  shuffleArray(array: Image[]) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n}\n"],"sourceRoot":""}